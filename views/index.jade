doctype html
head
	meta(charset='utf-8', name='viewport', content='width=device-width', initial-scale='1.0', maximum-scale='1.0', user-scalable='no')
	title= 'Deer'

	// Stylesheets
	link(rel='stylesheet', href='https://api.tiles.mapbox.com/mapbox.js/v1.6.2/mapbox.css')
	link(rel='stylesheet', href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css")
	link(rel='stylesheet', href='/stylesheets/style.css')
	link(href='/lib/jquery.bxslider.css', rel='stylesheet')

	// Javascript
	script(src='https://api.tiles.mapbox.com/mapbox.js/v1.6.2/mapbox.js')
	script(src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js")
	script(src='//code.jquery.com/ui/1.10.4/jquery-ui.js')
	script(src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js")
	
body(style='overflow: hidden')
	#map
		script.
			var map =  L.mapbox.map('map', 'eychen2014.hme0hhgm', {zoomControl: false, minZoom: 15, maxZoom: 20, maxBounds: [[40.335589, -74.676224], [40.360603, -74.644267]]}).setView([40.348510, -74.654479], 16);

	#rowcolor.row
		.rowhead 
				#sidebar.column.col-sm-2.col-xs-1(style='position: relative; width: 24.5%; overflow: visible')
					.panel-group(style='background-color: #333; margin:0; padding-left:auto; padding-bottom:0px;')
						h2#title Free Food Events

				ul#myTab.nav.nav-tabs
					li.active
						a(id = 'mcolor', href='#Map', data-toggle='tab') Map
					li
						a(id = 'mcolor', href='#About', data-toggle='tab') About
					li
						a(id = 'mcolor', href='#Team', data-toggle='tab') Team
					li
						a(id = 'mcolor', href='#Contact', data-toggle='tab') Contact
					li
						a(id = 'mcolor', href='https://fed.princeton.edu/cas/logout') LOGOUT &nbsp;
	.row
		#sidebar.column.col-sm-2.col-xs-1(style='padding-bottom: 5%')
			#accordion.panel-group
				- for row in timeRows
					h4
						div.panel-heading(style = 'outline: orange')
							table
								tr.sideentry.h5
									td(style='width: 75%; border-style: solid; border-color: transparent #555 transparent transparent; padding-right:4%; padding-left:4%') #{row.subject}
									td(style= 'width: 90%; padding-left:4%') #{row.time}
					div.panel-body.mine #{row.mess}

	.tab-content
		#Map.tab-pane.fade.in.active
		#About.tab-pane.fade
			.col-sm-12.col-md-12
				#jumbotronlogo.jumbotron
					#jumbotronscroll
						h2 WHAT DO TIGERS EAT?
						h3 Deer. Categorically and unequivocally.
						p 
							|Bengal and Indian tigers eat Sambar deer. 
							|Siberian tigers eat Roe deer and Sika deer. 
							|Sumatran tigers eat Muntjac deer. Caspian tigers, 
							|now extinct, ate camels (which I am told are the equivalent of desert deer). 
							|For the sake of rhetorical consistency, Princeton tigers use DEER to find food.
						p
							|Deer is Princeton's premier free food map. Never again will you have to trawl your inbox looking for free
							|food handouts to supplement your meager diet of gourmet sodium infused ramen. Deer aggregates and
							|visualizes all current free food events on campus so that any Princeton undergraduate can view all 
							|ongoing free food events at any given time. 

						.row
							.col-sm-12.col-md-12
								.thumbnail
									img(src='http://i.imgur.com/M0GyUJR.png', alt='...')
									.caption
										h3 Deer Schematic Diagram
										p 
											|Princeton listserv emails are forwarded to our Gmail account where they are processed and 
											|analyzed. If the incoming email is not from the FreeFood listserv, we use a Naive Bayes 
											|classifier to infer whether the email mentions free food or not. The Naive Bayes classifier
											|has been trained with over 300 listserv emails. Succesfully identified free food emails
											|are then parsed for food, location, and time. The email and its relevant attributes are
											|stored in our MySQL database. We use MapBox to plot the map and display the markers.
		
		#Team.tab-pane.fade
			.row
				.col-sm-12.col-md-3
					.thumbnail
						img(src='https://scontent-a-iad.xx.fbcdn.net/hphotos-frc1/t31.0-8/1150473_10200255008049025_214182866_o.jpg?dl=1, https://www.facebook.com/photo.php?fbid=10200255008049025&set=a.1351172030512.2045216.1567716721&type=3&theater', alt='..')
						.caption
							h3 Patrick Ding
							p Patrick is a freaking stud. When Patrick is not coding or doing ORFE things, Patrick likes to spend time building and launching rockets, looking beautiful, and performing as a virtuosic flautist.
				.col-sm-12.col-md-3
					.thumbnail
						img(src='https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-frc3/t1.0-9/10170692_10152747485783272_4225563882897453574_n.jpg', alt='..')
						.caption
							h3 Erick Chen
							p Erick is a beast at making maps. He likes long romantic walks in the rain. He is probably the sexiest contributer of Project Deer.
				.col-sm-12.col-md-3
					.thumbnail
						img(src='https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-prn1/t1.0-9/1618431_10152092289133542_1329434398_n.jpg', alt='..')
						.caption
							h3 Oscar Li
							p Oscar just likes to sleep. 
				.col-sm-12.col-md-3
					.thumbnail
						img(src='https://scontent-a-iad.xx.fbcdn.net/hphotos-prn2/t1.0-9/1175682_544752075572984_842042088_n.jpg', alt='..')
						.caption
							h3 Brandon Lam
							p Brandon is both a musician and programmer. Although he plays viola (ewwww), he still likes to believe that he can actually play music. He should have picked up the bassoon instead.

		#Contact.tab-pane.fade
			.col-sm-12.col-md-12
				#jumbotronlogo.jumbotron
					h2 Comments, Suggestions, Soiree Invitations?
					p 	Contact Project Manager Oscar Li!

		#Logout.tab-pane ...		

	script.
		var sidestuff = document.querySelectorAll('.sideentry');
		var markers = [];
		var locid = 0;
		var eid = 0;
		var locationid = {};

	if dataRows.length != 0
		- var current_longit = dataRows[0].longit;
		- for row in dataRows
			script.
			if row.longit !== current_longit
				script.
					locationid["#{current_longit}"] = [locid, 0];
					locid++;
				- console.log(current_location);
				- current_longit = row.longit;
			script.
				locationid["#{current_longit}"] = [locid, 0];
		- for row in timeRows
			- var loc = row.longit;
			script.
				sidestuff[eid].id = "sideid-" + locationid["#{loc}"][0] + "-" + locationid["#{loc}"][1] + "-" + eid;
				eid++;
				locationid["#{loc}"][1]++;


	//- Plot the makers, build carousel popups
	if dataRows.length != 0
		- var current_longit = dataRows[0].longit;
		- var current_lat = dataRows[0].lat;
		- console.log("--------------------------------------");
		- console.log("Starting location: " + current_location);
		- var subjects = [];
		- var messages = [];
		- var times = [];
		- var currlong;
		- var currlat;
		- for row in dataRows
			- console.log("In consideration: " + row.location + " versus: " + current_location);
			if row.longit === current_longit && row.lat === current_lat
				- subjects.push(row.subject);
				- messages.push(row.mess.replace(/\r?\n|\r/g, " "));
				- times.push(row.time);
				- currlong = row.longit;
				- currlat = row.lat;
			else 
				- console.log("Mapping at: " + current_location + " " + currlong + " " + currlat);
				//- - console.log("Subjects: " + subjects);
				//- - console.log("Messages: " + messages);
				//- - console.log("Times: " + times);
				script.
					var geoJson = [{
						// this feature is in the GeoJSON format: see geojson.org
						// for the full specification
						type: 'Feature',
						geometry: {
							type: 'Point',
							// coordinates here are in longitude, latitude order because
							// x, y is the standard for GeoJSON and many formats
							coordinates: [parseFloat("#{currlong}"), parseFloat("#{currlat}")]
						},
						properties: {
							title: "#{subjects}",
							description: "#{messages}",
							// one can customize markers by adding simplestyle properties
							// http://mapbox.com/developers/simplestyle/
							'marker-size': 'small',
							'marker-color': '#FF6600',
						}
					}];
					var myLayer = L.mapbox.featureLayer(geoJson).addTo(map);
					markers.push(myLayer);

					var messages = "#{messages.join('|~|')}";
					var subjects = "#{subjects.join('|~|')}";
					var times = "#{times.join('|~|')}";
					times = times.split("|~|");
					messages = messages.split("|~|");
					subjects = subjects.split("|~|");

					var arrows = "";
					if (subjects.length > 1) {
						arrows = "<a class='left carousel-control' href='#marker' data-slide='prev'>" +
												"<span class='glyphicon glyphicon-chevron-left'></span>" + 
											"</a>" + 
											"<a class='right carousel-control' href='#marker' data-slide='next'>" +
												"<span class='glyphicon glyphicon-chevron-right'></span>" +
											"</a>";
					}

					var caritemsfirst = "<div class='item active'>" +
																	"<h1 class=text-center>" + subjects[0] + "</h1>" +
																	"<h3 class=text-center>" + times[0] + "</h3>" + 
																	"<p class='text-center markermsg'>" + messages[0] + "</p>" +
															"</div>";
					var caritems = "";
					for (var i = 1; i < messages.length; i++) {
						caritems += "<div class='item'>" + 
													"<h1 class=text-center>" + subjects[i] + "</h1>" + 
													"<h3 class=text-center>" + times[i] + "</h3>" +
													"<p class='text-center markermsg'>" + messages[i] + "</p>" +
												"</div>";
					}

					////
					// indicators are dots corresponding to each page. Uncomment if you want it.
					////
					//- var indicatorsfirst = "<li data-target='#marker' data-slide-to='0' class='active'></li>";
					//- var indicators = "";
					//- for (var i = 1; i < subjects.length; i++) {
					//- 	indicators += "<li data-target='#marker' data-slide-to='" + i + "'></li>";
					//- }
					
					var content = "<div id='marker' class='carousel slide foodmarker' data-ride='carousel' data-interval='false'>" +
													//- "<ol class='carousel-indicators'>" +
													//- 	indicatorsfirst + indicators +
													//- "</ol>" +
													"<div class='carousel-inner'>" +
														caritemsfirst + caritems +
													"</div>" +  
												"</div>" + arrows;
					myLayer.bindPopup(content, {minWidth: 310});
		
				- subjects = [];
				- subjects.push(row.subject);
				- messages = [];
				- messages.push(row.mess.replace(/\r?\n|\r/g, " "));
				- times = [];
				- times.push(row.time);
				- current_longit = row.longit;
				- current_lat = row.lat;
				- currlong = row.longit;
				- currlat = row.lat;

		script.
			var geoJson = [{
				// this feature is in the GeoJSON format: see geojson.org
				// for the full specification
				type: 'Feature',
				geometry: {
					type: 'Point',
					// coordinates here are in longitude, latitude order because
					// x, y is the standard for GeoJSON and many formats
					coordinates: [parseFloat("#{currlong}"), parseFloat("#{currlat}")]
				},
				properties: {
					title: "#{subjects}",
					description: "#{messages}",
					// one can customize markers by adding simplestyle properties
					// http://mapbox.com/developers/simplestyle/
					'marker-size': 'small',
					'marker-color': '#FF6600',
				}
			}];
			var myLayer = L.mapbox.featureLayer(geoJson).addTo(map);
			markers.push(myLayer);

			var messages = "#{messages.join('|~|')}";
			var subjects = "#{subjects.join('|~|')}";
			var times = "#{times.join('|~|')}";
			times = times.split("|~|");
			messages = messages.split("|~|");
			subjects = subjects.split("|~|");

			var arrows = "";
			if (subjects.length > 1) {
				arrows = "<a class='left left-arrow carousel-control' href='#marker' data-slide='prev'>" +
										"<span class='glyphicon glyphicon-chevron-left'></span>" + 
									"</a>" + 
									"<a class='right right-arrow carousel-control' href='#marker' data-slide='next'>" +
										"<span class='glyphicon glyphicon-chevron-right'></span>" +
									"</a>";
			}

			var caritemsfirst = "<div class='item active'>" +
															"<h1 class=text-center>" + subjects[0] + "</h1>" +
															"<h3 class='text-center'>" + times[0] + "</h3>" + 
															"<p class='text-center markermsg'>" + messages[0] + "</p>" +
													"</div>";
			var caritems = "";
			for (var i = 1; i < messages.length; i++) {
				caritems += "<div class='item'>" + 
											"<h1 class=text-center>" + subjects[i] + "</h1>" + 
											"<h3 class='text-center'>" + times[i] + "</h3>" +
											"<p class='text-center markermsg'>" + messages[i] + "</p>" +
										"</div>";
			}

			////
			// indicators are dots corresponding to each page. Uncomment if you want it.
			////
			//- var indicatorsfirst = "<li data-target='#marker' data-slide-to='0' class='active'></li>";
			//- var indicators = "";
			//- for (var i = 1; i < subjects.length; i++) {
			//- 	indicators += "<li data-target='#marker' data-slide-to='" + i + "'></li>";
			//- }
			
			var content = "<div id='marker' class='carousel slide foodmarker' data-ride='carousel' data-interval='false'>" +
											//- "<ol class='carousel-indicators'>" +
											//- 	indicatorsfirst + indicators +
											//- "</ol>" +
											"<div class='carousel-inner'>" +
												caritemsfirst + caritems + 
											"</div>" +  
										"</div>" + arrows;
			myLayer.bindPopup(content, {minWidth: 300});

	script.
		$("#accordion").accordion({collapsible: true, heightStyle: "content", active: false});	

		function openmarker(i, j) {
			return function() {
				markers[i].openPopup();
				//markers[i].setIcon(bigIcon);
				//markers[i].layer.feature.properties['marker-color'] = '#000000';
			};
		}

		//- function closemarker(i) {
		//- 	return function() {
		//- 		markers[i].feature.properties['marker-color'] = '#FF6600';
		//- 	};
		//- }

		for (var j = 0; j < sidestuff.length; j++) {
			document.getElementById(sidestuff[j].id).onmouseover = openmarker(sidestuff[j].id.split('-')[1], sidestuff[j].id.split('-')[2]);
		}

		//- for (var j = 0; j < sidestuff.length; j++) {
		//- 	document.getElementById(sidestuff[j].id).onmouseout = closemarker(sidestuff[j].id.split('-')[1]);
		//- }

