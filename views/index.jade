doctype html
head
	meta(charset='utf-8', name='viewport', content='width=device-width', initial-scale='1.0', maximum-scale='1.0', user-scalable='no')
	title= 'DEER MAP'

	// Stylesheets
	link(rel='stylesheet', href='https://api.tiles.mapbox.com/mapbox.js/v1.6.2/mapbox.css')
	link(rel='stylesheet', href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css")
	link(rel='stylesheet', href='/stylesheets/style.css')
	link(href='/lib/jquery.bxslider.css', rel='stylesheet')

	// Javascript
	script(src='https://api.tiles.mapbox.com/mapbox.js/v1.6.2/mapbox.js')
	script(src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js")
	script(src='//code.jquery.com/ui/1.10.4/jquery-ui.js')
	script(src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js")
	

body(style='overflow: hidden')
	#map
		script.
			var map =  L.mapbox.map('map', 'eychen2014.hme0hhgm', {zoomControl: false, minZoom: 15, maxZoom: 20, maxBounds: [[40.335589, -74.676224], [40.360603, -74.644267]]}).setView([40.348510, -74.654479], 16);

	#rowcolor.row
		.rowhead 
				#sidebar.column.col-sm-2.col-xs-1(style='position: relative; width: 24.5%; overflow: visible')
					.panel-group(style='background-color: #333; margin:0; padding:0;')
						h2#title Free Food Events

				ul#myTab.nav.nav-tabs
					li.active
						a(id = 'mcolor', href='#Map', data-toggle='tab') Map
					li
						a(id = 'mcolor', href='#About', data-toggle='tab') About
					li
						a(id = 'mcolor', href='#Team', data-toggle='tab') Team
					li
						a(id = 'mcolor', href='#Contact', data-toggle='tab') Contact
					li
						a(id = 'mcolor', href='https://fed.princeton.edu/cas/logout') LOGOUT &nbsp;
	.row
		#sidebar.column.col-sm-2.col-xs-1(style='padding-bottom: 5%')
			#accordion.panel-group
				- for row in timeRows
					h4
						div.panel-heading 
							table
								tr.sideentry
									td(style='width: 75%; border-style: solid; border-color: transparent #555 transparent transparent; padding-right:4%; padding-left:4%') #{row.subject}
									td(style= 'width: 130%; padding-left:4%') #{row.time}
					div.panel-body.mine #{row.mess}

	//- put each sidebar element in a class corresponding to marker
	script.
		var sidestuff = document.querySelectorAll('.sideentry');
		var markers = [];
		var locid = 0;
		var eid = 0;
		var locationid = {};
		console.debug("Hey there");

	- var current_location = dataRows[0].location;
	- for row in dataRows
		if row.location !== current_location
			script.
				locationid["#{current_location}"] = locid;
				locid++;
			- console.log(current_location);
			- current_location = row.location;
		script.
			locationid["#{current_location}"] = locid;
	- for row in timeRows
		- var loc = row.location;
		script.
			sidestuff[eid].id = "sideid-" + locationid["#{loc}"] + "-" + eid;
			eid++;

		//- Tab panes
		.tab-content
			#Map.tab-pane.fade.in.active
			#About.tab-pane.fade
				.col-sm-12.col-md-12
					.jumbotron
						h2 WHAT DO TIGERS EAT?
						h3 Deer. Categorically and unequivocally.
						p 
							|Bengal and Indian tigers eat sambar deer. 
							|Siberian tigers eat roe deer and sika deer. 
							|Sumatran tigers eat muntjac deer. Caspian tigers, 
							|now extinct, ate camels (which I am told are the equivalent of desert deer). 
							|For the sake of rhetorical consistency, Princeton tigers use DEER to find food.
						p
							|DEER is Princeton's Free Food Map. Never again will you have to trawl your inbox looking for free
							|food handouts to supplement your meager diet of gourmet sodium infused ramen. DEER aggregates Princeton
							|listserv emails, searching for free food events, and displaying all the relevant email information 
							|on an interactive map. 
			#Team.tab-pane.fade
				.row
					.col-sm-12.col-md-3
						.thumbnail
							img(src='https://scontent-a-iad.xx.fbcdn.net/hphotos-frc1/t31.0-8/1150473_10200255008049025_214182866_o.jpg?dl=1, https://www.facebook.com/photo.php?fbid=10200255008049025&set=a.1351172030512.2045216.1567716721&type=3&theater', alt='..')
							.caption
								h3 Patrick Ding
								p Patrick is a freaking stud. When Patrick is not coding or doing ORFE things, Patrick likes to spend time building and launching rockets, looking beautiful, and performing as a virtuosic flautist.
					.col-sm-12.col-md-3
						.thumbnail
							img(src='https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-frc3/t1.0-9/10170692_10152747485783272_4225563882897453574_n.jpg', alt='..')
							.caption
								h3 Erick Chen
								p Erick is a beast at making maps. He likes to go to the gym late at nights after daily coding sessions and eating Hogie Haven. He is probably the sexiest contributer of the DEER project.
					.col-sm-12.col-md-3
						.thumbnail
							img(src='https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-prn1/t1.0-9/1618431_10152092289133542_1329434398_n.jpg', alt='..')
							.caption
								h3 Oscar Li
								p Oscar just likes to SLEEP! SLEEEP!! SLEEEP!!! SLEEEEP!!!! SLEEEEEP!!!!! SLEEEEEEP!!!!!! SLEEEEEEEP!!!!!!! SLEEEEEEEEP!!!!!!!! SLEEEEEEEEEP!!!!!!!!!
					.col-sm-12.col-md-3
						.thumbnail
							img(src='https://scontent-a-iad.xx.fbcdn.net/hphotos-prn2/t1.0-9/1175682_544752075572984_842042088_n.jpg', alt='..')
							.caption
								h3 Brandon Lam
								p Brandon is both a musician and programmer. Although he plays viola (ewwww), he still likes to believe that he can actually play music. He should have picked up the basson instead. Also, Brandon routinely benches 170.

			#Contact.tab-pane.fade
				.col-sm-12.col-md-12
					.jumbotron
						h2 Comments, Suggestions, Soiree Invitations?
						p 	Contact us at pdiddy@gmail.com
						p 
							|Please address comments, suggestions, and insults to our fearless Project Manager, Oscar Li, 
							|not to be confused with his alter ego, Sir Calo, our village idiot. 	
						p
							|Please address all soiree and coffee date invitations to Brandon Lam. His herald, PDiddy will 
							|handle the details. 

			#LOGOUT.tab-pane ...		


	//- Plot the makers, build carousel popups
	- var current_location = dataRows[0].location;
	- console.log("--------------------------------------");
	- console.log("Starting location: " + current_location);
	- var subjects = [];
	- var messages = [];
	- var times = [];
	- var currlong;
	- var currlat;
	- for row in dataRows
		//- - console.log("In consideration: " + row.location + " versus: " + current_location);
		if row.location === current_location
			- subjects.push(row.subject);
			- messages.push(row.mess.replace(/\r?\n|\r/g, " "));
			- times.push(row.time);
			- currlong = row.longit;
			- currlat = row.lat;
		else 
			- console.log("Mapping at: " + current_location + " " + currlong + " " + currlat);
			//- - console.log("Subjects: " + subjects);
			//- - console.log("Messages: " + messages);
			//- - console.log("Times: " + times);
			script.
				var geoJson = [{
					// this feature is in the GeoJSON format: see geojson.org
					// for the full specification
					type: 'Feature',
					geometry: {
						type: 'Point',
						// coordinates here are in longitude, latitude order because
						// x, y is the standard for GeoJSON and many formats
						coordinates: [parseFloat("#{currlong}"), parseFloat("#{currlat}")]
					},
					properties: {
						title: "#{subjects}",
						description: "#{messages}",
						// one can customize markers by adding simplestyle properties
						// http://mapbox.com/developers/simplestyle/
						'marker-size': 'small',
						'marker-color': '#FF6600',
					}
				}];
				var myLayer = L.mapbox.featureLayer(geoJson).addTo(map);
				markers.push(myLayer);

				var messages = "#{messages.join('|~|')}";
				var subjects = "#{subjects.join('|~|')}";
				var times = "#{times.join('|~|')}";
				times = times.split("|~|");
				messages = messages.split("|~|");
				subjects = subjects.split("|~|");

				var arrows = "";
				if (subjects.length > 1) {
					arrows = "<a class='left carousel-control' href='#marker' data-slide='prev'>" +
											"<span class='glyphicon glyphicon-chevron-left'></span>" + 
										"</a>" + 
										"<a class='right carousel-control' href='#marker' data-slide='next'>" +
											"<span class='glyphicon glyphicon-chevron-right'></span>" +
										"</a>";
				}

				var caritemsfirst = "<div class='item active'>" +
																"<h1 class=text-center>" + subjects[0] + "</h1>" +
																"<h3 class=text-center>" + times[0] + "</h3>" + 
																"<p class='text-center markermsg'>" + messages[0] + "</p>" +
														"</div>";
				var caritems = "";
				for (var i = 1; i < messages.length; i++) {
					caritems += "<div class='item'>" + 
												"<h1 class=text-center>" + subjects[i] + "</h1>" + 
												"<h3 class=text-center>" + times[i] + "</h3>" +
												"<p class='text-center markermsg'>" + messages[i] + "</p>" +
											"</div>";
				}

				////
				// indicators are dots corresponding to each page. Uncomment if you want it.
				////
				//- var indicatorsfirst = "<li data-target='#marker' data-slide-to='0' class='active'></li>";
				//- var indicators = "";
				//- for (var i = 1; i < subjects.length; i++) {
				//- 	indicators += "<li data-target='#marker' data-slide-to='" + i + "'></li>";
				//- }
				
				var content = "<div id='marker' class='carousel slide foodmarker' data-ride='carousel' data-interval='false'>" +
												//- "<ol class='carousel-indicators'>" +
												//- 	indicatorsfirst + indicators +
												//- "</ol>" +
												"<div class='carousel-inner'>" +
													caritemsfirst + caritems +
												"</div>" +  
											"</div>" + arrows;
				myLayer.bindPopup(content, {minWidth: 300});
	
			- subjects = [];
			- subjects.push(row.subject);
			- messages = [];
			- messages.push(row.mess.replace(/\r?\n|\r/g, " "));
			- times = [];
			- times.push(row.time);
			- current_location = row.location;
			- currlong = row.longit;
			- currlat = row.lat;
	script.
		var geoJson = [{
			// this feature is in the GeoJSON format: see geojson.org
			// for the full specification
			type: 'Feature',
			geometry: {
				type: 'Point',
				// coordinates here are in longitude, latitude order because
				// x, y is the standard for GeoJSON and many formats
				coordinates: [parseFloat("#{currlong}"), parseFloat("#{currlat}")]
			},
			properties: {
				title: "#{subjects}",
				description: "#{messages}",
				// one can customize markers by adding simplestyle properties
				// http://mapbox.com/developers/simplestyle/
				'marker-size': 'small',
				'marker-color': '#FF6600',
			}
		}];
		var myLayer = L.mapbox.featureLayer(geoJson).addTo(map);
		markers.push(myLayer);

		var messages = "#{messages.join('|~|')}";
		var subjects = "#{subjects.join('|~|')}";
		var times = "#{times.join('|~|')}";
		times = times.split("|~|");
		messages = messages.split("|~|");
		subjects = subjects.split("|~|");

		var arrows = "";
		if (subjects.length > 1) {
			arrows = "<a class='left left-arrow carousel-control' href='#marker' data-slide='prev'>" +
									"<span class='glyphicon glyphicon-chevron-left'></span>" + 
								"</a>" + 
								"<a class='right right-arrow carousel-control' href='#marker' data-slide='next'>" +
									"<span class='glyphicon glyphicon-chevron-right'></span>" +
								"</a>";
		}

		var caritemsfirst = "<div class='item active'>" +
														"<h1 class=text-center>" + subjects[0] + "</h1>" +
														"<h3 class='text-center arrowparent'>" + times[0] + "</h3>" + 
														"<p class='text-center markermsg'>" + messages[0] + "</p>" +
												"</div>";
		var caritems = "";
		for (var i = 1; i < messages.length; i++) {
			caritems += "<div class='item'>" + 
										"<h1 class=text-center>" + subjects[i] + "</h1>" + 
										"<h3 class='text-center arrowparent'>" + times[i] + "</h3>" +
										"<p class='text-center markermsg'>" + messages[i] + "</p>" +
									"</div>";
		}

		////
		// indicators are dots corresponding to each page. Uncomment if you want it.
		////
		//- var indicatorsfirst = "<li data-target='#marker' data-slide-to='0' class='active'></li>";
		//- var indicators = "";
		//- for (var i = 1; i < subjects.length; i++) {
		//- 	indicators += "<li data-target='#marker' data-slide-to='" + i + "'></li>";
		//- }
		
		var content = "<div id='marker' class='carousel slide foodmarker' data-ride='carousel' data-interval='false'>" +
										//- "<ol class='carousel-indicators'>" +
										//- 	indicatorsfirst + indicators +
										//- "</ol>" +
										"<div class='carousel-inner'>" +
											caritemsfirst + caritems + 
										"</div>" +  
									"</div>" + arrows;
		myLayer.bindPopup(content, {minWidth: 300});

	script.
		$("#accordion").accordion({collapsible: true, heightStyle: "content", active: false});	

		function openmarker(i) {
			return function() {
				markers[i].openPopup();
				//markers[i].setIcon(bigIcon);
				//markers[i].layer.feature.properties['marker-color'] = '#000000';
			};
		}

		//- function closemarker(i) {
		//- 	return function() {
		//- 		markers[i].feature.properties['marker-color'] = '#FF6600';
		//- 	};
		//- }

		for (var j = 0; j < sidestuff.length; j++) {
			document.getElementById(sidestuff[j].id).onmouseover = openmarker(sidestuff[j].id.split('-')[1]);
		}

		//- for (var j = 0; j < sidestuff.length; j++) {
		//- 	document.getElementById(sidestuff[j].id).onmouseout = closemarker(sidestuff[j].id.split('-')[1]);
		//- }

